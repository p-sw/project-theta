// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Ban {
  id        String   @db.VarChar(33) @id
  userId String @db.VarChar(33)
  reason String
  until DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String  @db.VarChar(33) @id
  passwordHash  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  banned Ban[]

  github GithubOAuth?
  discord DiscordOAuth?

  mcpConfigs McpConfig[]
}

model GithubOAuth {
  id        String   @id
  accessToken String
  scope String

  userId String @db.VarChar(33) @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordOAuth {
  id        String   @id
  accessToken String
  expiresAt DateTime
  refreshToken String
  scope String

  userId String @db.VarChar(33) @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthSession {
  id        String   @id @db.VarChar(33)
  secret    String
}

model McpConfig {
  mcpId String
  userId String @db.VarChar(33)
  enabled Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([mcpId, userId])
}

model ServerLog {
  logKey        String   @id
  value         String
  
  updatedAt DateTime @updatedAt
}