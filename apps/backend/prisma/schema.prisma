// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EmailVerificationReason {
  SIGNUP
  PASSWORD_RESET
  EMAIL_CHANGE
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
  EXPIRED
}

model EmailVerification {
  id        String   @id
  email     String
  reason    EmailVerificationReason
  status    EmailVerificationStatus
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Ban {
  id        String   @id
  userId String @unique
  reason String
  until DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id
  email     String   @unique
  passwordHash  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  banned Ban?

  emailVerification EmailVerification[]
  mcpConfigs McpConfig[]
}

model McpConfig {
  mcpId String
  userId String
  enabled Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([mcpId, userId])
}

model ServerLog {
  logKey        String   @id
  value         String
  
  updatedAt DateTime @updatedAt
}